# Opal Development Commands - Clean Slate with Metaprogramming

var PROJECT = "opal"
var VERSION = "$(git describe --tags --always --dirty 2>/dev/null || echo 'dev')"
var MODULES = ["cli", "runtime"]

# =============================================================================
# 📦 MODULE COMMANDS - Generated via Metaprogramming
# =============================================================================

for module in @var(MODULES) {
    fun @var(module)_test = @workdir(@var(module)) { 
        @log("🧪 Testing @var(module) module...")
        go test -v ./... 
    }
    
    fun @var(module)_lint = @workdir(@var(module)) { 
        @log("🔍 Linting @var(module) module...")
        command -v golangci-lint >/dev/null 2>&1 && golangci-lint run --timeout=3m || go vet ./...
    }
    
    fun @var(module)_format = @workdir(@var(module)) { 
        @log("📝 Formatting @var(module) module...")
        command -v gofumpt >/dev/null 2>&1 && gofumpt -w . || go fmt ./...
    }
}

# =============================================================================
# 🔄 GLOBAL COMMANDS
# =============================================================================

fun test {
    @log("🧪 Testing all modules...")
    for module in @var(MODULES) {
        @cmd(@var(module)_test)
    }
    @log("✅ All tests passed!")
}

fun format {
    @log("📝 Formatting all code...")
    @parallel {
        for module in @var(MODULES) {
            @cmd(@var(module)_format)
        }
    }
    @log("✅ All code formatted!")
}

fun lint {
    @log("🔍 Running linters...")
    @parallel {
        for module in @var(MODULES) {
            @cmd(@var(module)_lint)
        }
    }
    @log("✅ Linting complete!")
}

fun clean {
    @log("🧹 Cleaning artifacts...")
    @parallel {
        for module in @var(MODULES) {
            @workdir(@var(module)) { go clean -cache -testcache }
        }
    }
    rm -f @var(PROJECT) coverage.out coverage.html
    @log("✅ Cleanup complete")
}

fun build {
    @log("🔨 Building @var(PROJECT) CLI...")
    @cmd(test)
    @workdir("cli") { go build -ldflags="-s -w -X main.Version=@var(VERSION)" -o ../opal . }
    @log("✅ Built: ./opal")
}

fun ci {
    @log("🔄 Clean slate CI workflow...")
    @cmd(format)
    @cmd(lint) 
    @cmd(test)
    @log("✅ CI complete!")
}

fun info = @log("📊 @var(PROJECT) Clean Slate Status
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Project: @var(PROJECT) (Plan-Verify-Execute Engine)
Version: @var(VERSION)

Current Modules: @var(MODULES)
  cli/        - Command-line interface
  runtime/    - Lexer v2 (high-performance tokenization)
  docs/       - Architecture and specification

Ready for fresh AST and parser implementation!")

fun help = @log("🔧 Opal Development Commands (Clean Slate)

🚀 Main Commands:
  build     - Build CLI binary
  ci        - Full CI workflow (format, lint, test)
  test      - Run all tests
  clean     - Clean artifacts

📝 Code Quality:
  format    - Format all code
  lint      - Run linters

📊 Utilities:
  info      - Show project status
  help      - Show this help

💡 Module-specific commands are auto-generated:
  cli_test, cli_lint, cli_format
  runtime_test, runtime_lint, runtime_format")