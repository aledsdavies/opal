name: Nightly Fuzzing

on:
  schedule:
    - cron: '0 2 * * *'   # 02:00 UTC nightly
  workflow_dispatch:      # Allow manual trigger

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  GO_VERSION: '1.25.x'

jobs:
  fuzz:
    name: Fuzz Testing (2min per target)
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: read
      actions: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Snapshot corpus before fuzzing
        run: |
          set -euo pipefail
          echo "==> Corpus snapshot (before)"
          BEFORE_COUNT=$(find runtime/parser/testdata/fuzz -type f 2>/dev/null | wc -l || echo 0)
          BEFORE_SIZE=$(du -sb runtime/parser/testdata/fuzz 2>/dev/null | cut -f1 || echo 0)
          echo "Files: $BEFORE_COUNT"
          echo "Bytes: $BEFORE_SIZE"
          echo "before_count=$BEFORE_COUNT" >> $GITHUB_OUTPUT
          echo "before_size=$BEFORE_SIZE" >> $GITHUB_OUTPUT
        id: before

      - name: Run fuzz targets (2 min each)
        run: |
          set -euo pipefail
          cd runtime/parser
          
          # List of fuzz targets to run (each gets full 2 minutes)
          FUZZ_TARGETS=(
            "FuzzParserDeterminism"
            "FuzzParserNoPanic"
            "FuzzParserEventBalance"
            "FuzzParserMemorySafety"
            "FuzzParserPathologicalDepth"
            "FuzzParserErrorRecovery"
            "FuzzParserWhitespaceInvariance"
          )
          
          for target in "${FUZZ_TARGETS[@]}"; do
            echo "==> Fuzzing $target (2 minutes)"
            go test -run '^$' -fuzz "^${target}$" -fuzztime=2m || {
              echo "ERROR: $target failed"
              exit 1
            }
          done
          
          echo ""
          echo "==> All fuzz targets completed successfully"

      - name: Snapshot corpus after fuzzing
        if: always()
        run: |
          set -euo pipefail
          echo "==> Corpus snapshot (after)"
          AFTER_COUNT=$(find runtime/parser/testdata/fuzz -type f 2>/dev/null | wc -l || echo 0)
          AFTER_SIZE=$(du -sb runtime/parser/testdata/fuzz 2>/dev/null | cut -f1 || echo 0)
          BEFORE_COUNT=${{ steps.before.outputs.before_count }}
          BEFORE_SIZE=${{ steps.before.outputs.before_size }}
          
          NEW_FILES=$((AFTER_COUNT - BEFORE_COUNT))
          SIZE_GROWTH=$((AFTER_SIZE - BEFORE_SIZE))
          
          echo "Files: $AFTER_COUNT (+ $NEW_FILES new)"
          echo "Bytes: $AFTER_SIZE (+ $SIZE_GROWTH bytes)"
          echo "new_files=$NEW_FILES" >> $GITHUB_OUTPUT
          echo "size_growth=$SIZE_GROWTH" >> $GITHUB_OUTPUT
          
          # Check corpus size cap (warn if > 10MB)
          if [ $AFTER_SIZE -gt 10485760 ]; then
            echo "::warning title=Corpus Size::Corpus is ${AFTER_SIZE} bytes (>10MB). Consider pruning."
          fi
          
          if [ $NEW_FILES -gt 0 ]; then
            echo "✅ Discovered $NEW_FILES new interesting inputs"
          else
            echo "✅ No new inputs (corpus is stable)"
          fi
        id: after

      - name: Upload updated corpus
        if: always()
        run: |
          set -euo pipefail
          tar czf corpus-nightly-${{ github.run_number }}.tgz runtime/parser/testdata/fuzz || true
        continue-on-error: true

      - name: Upload corpus artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: fuzz-corpus-nightly-${{ github.run_number }}
          path: corpus-nightly-${{ github.run_number }}.tgz
          if-no-files-found: ignore
          retention-days: 14

      - name: Comment on corpus growth
        if: steps.after.outputs.new_files > 0
        run: |
          echo "::notice title=Corpus Growth::Discovered ${{ steps.after.outputs.new_files }} new interesting inputs (+${{ steps.after.outputs.size_growth }} bytes). Auto-PR will be created for review."
